---
import { marked, Renderer, type Tokens } from "marked";
import cx from "classnames";

import Layout from "../layout/Layout.astro";
import Banner from "../components/Banner.astro";
import Tabs from "../components/Tabs.astro";
import TabPanel from "../components/TabPanel.astro";
import SearchField from "../components/SearchField.astro";
import { getReadMeData } from "../utils/markdown";

export const prerender = true;

// Shared renderers
const iconImageRenderer: Renderer["image"] = ({ href, title, text }) => {
  return `<img class="min-w-8 h-8" src="${href.replace("/public", "")}" alt="${text}" title="${title}" />`;
};
const responsiveUrlRenderer: Renderer["link"] = ({ href, title, text }) => {
  return `<a href="${href}" title="${title}" target="_blank" rel="noopener noreferrer"><span class="hidden lg:block">${text}</span><span class="lg:hidden">Website</span></a>`;
};
const tableRowRenderer: Renderer["tablerow"] = (content) => {
  return `${content.text}`;
};
const getAlignStyle = (align: string | null) => {
  return align
    ? {
        left: "justify-start",
        center: "justify-center",
        right: "justify-end",
      }[align]
    : null;
};

const renderContent = ({
  text,
  header,
}: {
  text: string;
  header: boolean;
  align: string | null;
}) => {
  if (header) {
    // Hide logo and features headers
    if (text === "Logo" || text === "Features") {
      return "";
    }
  }
  return text;
};

const renderTableCells = (
  cells: Tokens.TableCell[],
  renderer = defaultRenderer
) => cells.map((cell) => renderer.tablecell(cell)).join("");
const renderTableRows = (
  rows: Tokens.TableCell[][],
  renderer = defaultRenderer
) => rows.map((row) => renderTableCells(row, renderer)).join("");

const defaultRenderer = new marked.Renderer();
defaultRenderer.image = iconImageRenderer;
defaultRenderer.tablerow = tableRowRenderer;
defaultRenderer.tablecell = (cell) => {
  let content: string;
  // Hide logo header
  if (cell.header && cell.text === "Logo") {
    content = "";
  } else {
    content = websitesRenderer.parser.parseInline(cell.tokens);
  }

  return `<div class="${cx(
    cell.header ? "header font-bold hidden md:block" : "cell",
    "py-[13.5px] px-3 border-b md:border-lightGray flex items-center",
    // Border styles
    "border-b [&:nth-last-child(-n+3)]:border-b-0 border-lightGray",
    getAlignStyle(cell.align)
  )}"><span>${content}</span></div>`;
};
defaultRenderer.table = ({ header, rows }) => {
  return `<div class="grid w-full grid-cols-[auto,auto,minmax(auto,1fr)] md:grid-cols-[auto_minmax(222px,auto)_1fr]" data-columns="3">
    ${renderTableCells(header)}
    ${renderTableRows(rows)}
  </div>`;
};

const websitesRenderer = new marked.Renderer();
websitesRenderer.image = iconImageRenderer;
websitesRenderer.link = responsiveUrlRenderer;
websitesRenderer.tablerow = tableRowRenderer;
websitesRenderer.table = ({ header, rows }) => {
  return `<div class="grid w-full grid-cols-[auto_minmax(100px,1fr)_auto] md:grid-cols-[auto_1fr_auto_auto] lg:grid-cols-[auto_minmax(222px,auto)_1fr_auto]" data-columns="4">
    ${renderTableCells(header, websitesRenderer)}
    ${renderTableRows(rows, websitesRenderer)}
  </div>`;
};
websitesRenderer.tablecell = (cell) => {
  let content: string;
  // Hide logo and features headers
  if (cell.header && ["Logo", "Features"].includes(cell.text)) {
    content = "";
  } else {
    content = websitesRenderer.parser.parseInline(cell.tokens);
  }

  return `<div class="${cx(
    cell.header ? "header font-bold hidden md:block" : "cell",
    "py-[13.5px] px-1 md:px-3 flex items-center",
    // Name styles
    "[&:nth-child(4n-2)]:text-lg md:[&:nth-child(4n-2)]:text-base",
    // Tag styles
    "[&:nth-child(4n)]:col-span-full md:[&:nth-child(4n)]:col-auto [svg path]:fill-indigoBlue",
    // Border styles
    "[&:nth-child(4n)]:border-b [&:nth-last-child(-n+1)]:border-b-0 md:border-b md:[&:nth-last-child(-n+4)]:border-b-0 border-lightGray",
    getAlignStyle(cell.align)
  )}">${content}</div>`;
};

const { platforms, websites, developerTools, securityKeys } = getReadMeData();
---

<Layout>
  <Banner>
    <p>
      Powered by the Bitwarden community. Contribute to this list via <a
        href="https://github.com/bitwarden/passkeys-index">GitHub</a
      >
    </p>
  </Banner>
  <section class="px-8 xl:px-[101px] my-10 md:my-14 max-w-screen-2xl mx-auto">
    <div class="mb-8 md:px-[35px] md:mb-[51px]">
      <h1 class="mb-4 text-4xl md:text-6xl">PasskeyIndex.io</h1>
      <p>
        Your Resource for Platforms, Apps, and Websites Supporting Passkey Login
      </p>
    </div>
    <Tabs
      tabs={[
        { title: "Websites", id: "websites", isActive: true },
        { title: "Platforms", id: "platforms" },
        { title: "Developer Tools", id: "developer-tools" },
        { title: "Security Keys", id: "security-keys" },
      ]}
    >
      <Fragment slot="search">
        <SearchField />
      </Fragment>
      <TabPanel tabId="websites" isActive>
        <Fragment
          set:html={marked.parser([websites], { renderer: websitesRenderer })}
        />
      </TabPanel>
      <TabPanel tabId="platforms">
        <Fragment
          set:html={marked.parser([platforms], { renderer: defaultRenderer })}
        />
      </TabPanel>
      <TabPanel tabId="developer-tools">
        <Fragment
          set:html={marked.parser([developerTools], {
            renderer: defaultRenderer,
          })}
        />
      </TabPanel>
      <TabPanel tabId="security-keys">
        <Fragment
          set:html={marked.parser([securityKeys], {
            renderer: defaultRenderer,
          })}
        />
      </TabPanel>
    </Tabs>
  </section>
  <Banner>
    <p>
      Powered by the Bitwarden community. Contribute to this list via <a
        href="https://github.com/bitwarden/passkeys-index">GitHub</a
      >
    </p>
  </Banner>
</Layout>
